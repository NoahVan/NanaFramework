redis:
首先redis是一个基于内存的nosql中间件，有五种数据结构，支持持久化，常用来做缓存，分布式锁等，相比于同类产品memcache，提供了持久化，
更多的数据类型，并且是单线程的
1、最常用的 String 他的存储结构是动态字符串，可以修改，采用预分配冗余空间的方式来减少内存的频繁分配，他这是典型的空间换时间的思想
（内部为当前字符串分配内存时，实际分配的空间会高于字符串的实际长度，当字符串的大小小于1M时，扩容都是加倍现有空间，
如果超过1M,每次扩容1M,字符串最大是512M）
因为他是动态字符串结构，我猜测他的扩容规则，应该类似于ArrayList,会新创建分配一块扩容后的内存，然后将数据拷贝到新分配的内存中
2、是他的List类型 他的存储结构是双向链表，我们都知道，链表这种结构首尾插入和删除操作的时间复杂度都是O(1),但他随机定位能力较弱
时间复杂度比较高是O(n)
3、hash类型 他的数据结构类似于java中的HashMap，数组+链表的方式，hash的内容key和value存放在链表中，数组中存放的是链表的头指针，
存储时，他首先会利用hash函数来计算key的hashCode，然后用hashcode对数组长度取模，然后定位到链表的表头，再对链表进行遍历获取相应的
value,链表结构是为了处理hash碰撞的情况的，当hash碰撞发生的比较频繁时，他会扩容，数组会扩容为原来的两倍，将所有的键值对重新分配，
如果键值对过多，一次完整的搬移操作会耗时过长，所以它采用了一种渐进式的方式，他首先会同时保留新旧两个hash结构，在后续的定时任务，
以及hash结构的读写指令中将旧的结构中的数据逐渐地移过去
4、set类型 他的内部也是hash结构的，所有的value都指向同一个内部值
5、zset类型 底层使用了两种数据结构，第一个是hash，第二个是跳跃表，hash的作用就是存储value和权重score，保障元素value的唯一性，
可以通过元素value找到相应的score值，而跳跃表的作用是为了给元素排序

备份和持久化 Redis支持RDB和AOF两种持久化机制,持久化功能有效的避免因进程退出造成的数据丢失问题，RDB是每隔一段时间生成redis内存中的数据的
一份完整的快照，AOF方式是有数据写入redis,redis自身就会先将数据写入aof日志文件（会先写入os cache），过大的话会利用缓存淘汰算法，
删除旧的数据

---------------------------------------------------------------------------------------------------------------------------------
dubbo ：
是一个分布式服务框架，提供RPC远程服务调用
它基于接口方法的远程过程调用，基于注册中心目录服务，使服务的消费方能动态的查找服务提供方，
服务提供方可以平滑增加或减少机器。

在大规模服务化之前，应用可能只是通过 RMI 或 Hessian 等工具，简单的暴露和引用远程服务，
通过配置服务的URL地址进行调用，通过 F5 等硬件进行负载均衡，当服务越来越多的时候，
url地址的配置管理变得困难，F5硬件的负载均衡器的单点压力越来越大，而此时就迫切的需要
一个服务注册中心，能够动态的注册和发现服务，并通过在消费方获取服务提供方地址列表，
实现软负载均衡和 Failover，以及随着服务量的增大，需要提供多少台服务器支撑，什么时候加
服务器，为了解决这个问题，我们可以通过监控中心把每天的调用量，响应时间都统计出来，作为参考指标
我们还可以给一台机器一直加权重，并记录响应时间的变化，直到响应时间达到阈值，记录此时的访问量，
我们就可以乘以机器数反推总容量了，这样就可以根据需求添加服务器了

他的整体架构包括服务提供方，注册中心，服务消费方，监控中心，以及Container服务运行容器
服务提供者在启动时，向注册中心注册自己提供的服务
服务消费方在启动时，向注册中心订阅自己所需要的服务
注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者
服务消费者，基于软负载均衡算法，从提供者列表里选一台提供者进行调用，如果调用失败，再选另一台调用
---------------------------------------------------------------------------------------------------------------------------------
rabbitMQ:






---------------------------------------------------------------------------------------------------------------------------------
classLoader：
类加载器，装载class字节码文件，java程序启动的时候，需要装载类到jvm中，但它不是一次性的都装载进去，他会先加载一些基础类，
其他类等到jvm需要用到时再装载，这样的好处是节省了内存的开销

在JVM中就算是同一个类，如果是由不同加载器加载的，他会认为这是不同的类，这样的话就乱套了
所以即便在Java中提供了Bootstrp loader（是由c++实现的），ExtClassLoader，AppClassLoader加载器，
但他们分别负责加载不同区域的类，利用一种双亲委派机制，类加载器在加载类时会先询问parent，让parent帮助加载，
如果parent不能加载，他才会去加载类，这样就保证了一个类由一个类加载器加载

（可以触发类加载的有：new，class.forname()，调用静态变量，静态方法）
---------------------------------------------------------------------------------------------------------------------------------

集合
    List
    ArrayList 内部数据结构是数组，是线程不安全的，扩容规则是oldCapacity + (oldCapacity >> 1)，扩容为原来的1.5倍
    Vector 内部数据结构是数组，方法上都是同步的，加有synchronized，扩容规则是有一个capacityIncrement如果大于0，就扩容这些，
 否则扩容为原来的两倍
    LinkedList 内部数据结构是双向链表，设有头尾节点，线程不安全
    CopyOnWriteArrayList 内部使用volatile数组结构，保证内存可见性，他在进行操作时会先将当前数组复制一份，
 在新数组上操作，然后再赋值给它，来保证线程安全，但是会导致数据弱一致性
    CopyOnWriteArraySet 里面操作的就是CopyOnWriteArrayList
    Set
    HashSet 是利用HashMap实现的，利用了HashMap的key来存储数据，他是使用散列函数计算位置的，所以他的位置是随机的，
 所以不能保证顺序
    TreeSet 是使用TreeMap实现，利用红黑树的先序遍历保证顺序
    LinkedHashSet 是利用linkedHashMap实现的
    Map
    Hashtable 默认大小是11，加载因子是0.75，采用数组加链表的方式存储，使用同步机制方法保证线程安全，不支持null键和值
    HashMap 默认大小是16，加载因子是0.75，采用数组加链表的方式存储，线程不安全
    LinkedHashMap 继承HashMap，默认大小，加载因子同HashMap，数据结构是数组加双向链表，双向链表维护了元素插入的先后顺序
    ConcurrentHashMap 使用volatile+cas算法来保证线程安全的
    Collections 中提供有同步方法，使用装饰器模式对原有集合方法进行同步操作
---------------------------------------------------------------------------------------------------------------------------------

多线程
它的安全性，为什么存在线程不安全
   1、我们都知道系统进行资源的分配和调度是以进程为单位进行分配的，而线程是进程的一个实体，
   而进程中堆和方法区的资源是线程间共享的，但cpu又是以线程为单位采用轮片的方式进行分配，
   当存在多个线程同时操作共享资源时，就可能会出现不安全的问题
   针对这种情况，我们可以给资源加锁，来保证在某一时刻，当前资源只被一个线程持有，直到当前线程释放
   2、线程的安全一般可以计算依赖严格的执行顺序，这个在多线程里又无法保证的
   3、或者计算值依赖某个变量，多核cpu中cahce行缓存等原因，其他线程修改了变量，但是没有同步，就会出现问题
   针对这两种情况我们可以使用volatile和cas算法，或者加锁来保证线程安全

提到这里就让我想到了Java中java concurrent package(java并发工具包下)提供的一些保证线程安全的工具类
 CopyOnWriteArrayList 内部使用volatile数组结构，保证内存可见性，他在进行操作时会先将当前数组复制一份，
 在新数组上操作，然后再赋值给它，来保证线程安全，但是会导致数据弱一致性
 CopyOnWriteArraySet 里面操作的就是CopyOnWriteArrayList
 ConcurrentHashMap 与hashMap在jdk7和jdk8中的区别





---------------------------------------------------------------------------------------------------------------------------------
设计模式：
工厂：
代理：为其他对象提供一种代理，以控制对这个对象的访问
单例：核心就是指一个类不需要创建多次，并向外提供一个统一的获取实例的方法
        私有构造方法，外部无法直接创建实例，所以要用你提供的静态方法去获取实例，你自己保证实例只创建一次

组合模式：组合的核心就是你需要用到另一个类的东西，作为复用，就把这个类引进来
装饰器：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活
适配器：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作
        比如将DTO转换成Entity可以调用需要传入实体类的才能调用的方法
责任链：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，
        并且沿着这条链传递请求，直到有对象处理它为止。
观察者：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新
---------------------------------------------------------------------------------------------------------------------------------
代理 + AOP：





---------------------------------------------------------------------------------------------------------------------------------
分布式：





---------------------------------------------------------------------------------------------------------------------------------
Mysql + Oracle:






---------------------------------------------------------------------------------------------------------------------------------
JVM调优：





---------------------------------------------------------------------------------------------------------------------------------
spring mvc
重要的类：
DispatcherServlet:前置控制器
HandlerMapping：处理请求的映射
    SimpleUrlHandlerMapping：通过配置文件，把一个URL映射到Controller
    DefaultAnnotationHandlerMapping：通过注解，把一个URL映射到Controller
HandlerAdapter：处理请求的映射
    AnnotationMethodHandlerAdapter：通过注解把一个URL映射到Controller类上的方法上
Controller：控制器
HandlerInterceptor：拦截器
ViewResolver：试图解析器



---------------------------------------------------------------------------------------------------------------------------------
mybatis




---------------------------------------------------------------------------------------------------------------------------------
互联互通项目（医院信息集成平台通用接口）
spring
rabbitMq
oracle
spring data jpa
dubbo
redis
cxf
poi
atomikos
unirest
webservice

1、项目使用webservice的方式向外部提供服务
为什么会用到webservice:首先是因为需要跟不同的医院对接，不同医院使用的编程语言是无法统一的
webservice:XML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。
首先是介绍项目，而且项目涉及到与外部对接和内部对接，两者采用的方式不同，
一个外部对接采用webservice，内部对接dubbo服务
然后可以简单说下为什么与外部对接采用webservice，内部采用dubbo，分别的优缺点
然后开始体内部业务，涉及的模板定义->然后根据模板解析请求信息->然后存储请求信息->



---------------------------------------------------------------------------------------------------------------------------------
病历检索项目 提供的服务主要是相似病历的一个快速检索功能，来协助医院工作人员对相似病人的诊断参考

这个项目类似一个中间件项目，我们的病历都来源于rabbitMQ，而我们这边消息发布方，来源于不同的产生病历的项目
然后他们通过fanout的方式发布消息，目前上面是有两个队列，消费方这边只有cdr和es，消费方分别监听不同的队列，
es这边监听了一个队列，然后消费里面的消息，因为消息来源于不同的发布方，所以消息的实际类型是不同的，所以需要
解析消息，然后这个解析消息的时候当时是想到了两套方案，第一套是想使用直接写不同的解析类，因为规定有每个消息
里面必须要包含有一个消息类别的type值，然后根据拿到的type的不同，使用工厂模式返回不同的解析类，但是使用这种
方式时，如果添加新消息类型的话，就要添加一个对应的解析类，所以为了这边的解析逻辑可以共用一套，看能不能通过
配置的方式去实现，所以想到了第二套方案，利用我们现在在用的配置中心来辅助完成，在配置中心需要维护每种类型的
消息解析的模板配置，具体的就是为每一个需要的key配置对应的模板，通过${字段名}的方式在解析时替换成对应的值即可，
这样在新添加一个type类型的消息时，只需要在配置中心进行配置即可，而不需要改动现有代码

---------------------------------------------------------------------------------------------------------------------------------
elasticsearch 是一个分布式、可扩展、实时的搜索与数据分析引擎
涉及到的名词：
    index、有两层含义，做名词时索引类似于数据库，作动词时索引是一个类似insert的插入动作
    相关性、根据条件进行查询时返回的结果会根据相关性得分将结果排序显示
    集群、而集群是由一个或者多个拥有相同 cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。
          当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。
    分片、主分片和副本分片，主分片当索引建立时就确定了，后期是没办法再更改的，主分片还决定着的大小还决定着能够存储的数据量
          而副本分片是可以更改的一个 分片 是一个底层的 工作单元 ，它仅保存了全部数据中的一部分，一个分片是一个 Lucene 的实例，
          以及它本身就是一个完整的搜索引擎（索引实际上是指向一个或者多个物理 分片 的 逻辑命名空间 ）
    节点、每个节点就是一个elasticsearch实例
    主节点、它将负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等
    集群健康值、green所有分片正常运行，yellow有副本分片没有正常运行，red有主分片没有正常运行

    Elasticsearch 是利用分片将数据分发到集群内各处的。分片是数据的容器，文档保存在分片内，
    分片又被分配到集群内的各个节点里。 当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，
    使得数据仍然均匀分布在集群里。
    当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。
     但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。
     详细信息请查看最好使用单播代替组播

查询方法
    match:这个是全文检索，根据分词器将查询条件分词，然后根据这些分词查询并根据相关性进行顺序展示
    match_phrase:这个叫做短语搜索，这个是将查询条件当成一个短语去查询结果
    highlight：高亮检索，加上这个条件，返回结果与之前一样，与此同时结果中还多了一个叫做 highlight 的部分
    aggs：聚合，类似于group by分组

---------------------------------------------------------------------------------------------------------------------------------
解读AQS抽象
node节点：有shared（共享模式）和exclusive（独占模式）
state :单一状态信息
conditionObject :条件变量，条件变量内部维护有一个单向链表，用来存储调用条件变量await方法阻塞的线程


独占方式获取和释放资源
使用方法acquire()获取资源：带有interruptibly表示会对中断进行响应
1、首先尝试获取资源tryAcquired，设置state的值，成功则直接返回，失败则进入第2步
2、将当前线程状态设置为获取独占资源失败的状态，并添加到阻塞队列，并调用park方法挂起自己

使用release()方法释放资源
1、首先尝试释放资源tryReleased,如果失败返回false,成功进入第2步
2、调用unPark方法唤醒阻塞队列中的一个线程

共享方式获取和释放资源
过程与独占方式类似，只是在尝试获取和尝试释放的方法需要去用共享资源的方式去实现


除了实现上述所说的尝试获取资源和释放资源的方法外，还需要实现isHeldExclusively，来判断锁是被当前
线程独占还是共享

总结，在进行线程安全问题的时候会分别提到内置锁和自定义锁（Java并发包下提供的锁）
内置锁synchronized：

自定义ReentrantLock(重入锁)和读写锁，看这些锁的实现会发现他们都是基于一个叫做AQS的抽象同步队列
实现的，这个抽象同步队列里面维护有一个双向阻塞队列，用来将获取锁失败的线程封装成为一个node节点
存储在阻塞队列中，使用一个state状态字段来描述当前锁的状态，此状态值是由volatile修饰的可以保证
内存可见性的变量，可以通过提供的cas方法来对本变量进行原子操作，AQS里面提供了获取资源的两类模式，
一个是通过独占的方式获取，一个是通过共享的方式获取，无论是通过独占的方式还是共享的方式他们第一步
都是去尝试获取资源，如果失败就将自己以exclusive或shared放入到阻塞队列并挂起，成功则直接返回，当
释放资源时分别调用

锁是用来实现原子性和可见性的


而解决多线程安全问题可以从原子性和内存可见性上进行解决

AQS是靠加锁解锁修改volatile类型的state变量，触发的happen before，从而保证了可见性

多线程环境下，表现符合期望的行为，他就是安全的

为什么会不安全，要从Java内存模型开始讲

主内存和工作内存

主要问题是由于不能保证可见性和不能保证原子性导致的

正常情况下，多线程操作是不是同时的都保证不了可见性

这个使用volatile能够保证可见性，但是保证不了原子性

多个线程并发操作，并且计算变量的新值依赖于当前变量的值，如果保证不了可见性和原子性，也会有问题，比如像计数器


